<% require "arkana/helpers/string" %>
<% require "arkana/helpers/dart_template_helper" %>
import '<%=(@namespace).downcase%>_environment.dart';

// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)
const _salt = [<%= @salt.formatted %>];

class <%= @namespace %> {

    static final Global global = Global();

<% for environment in @environments %>
    static final <%= @namespace %>Environment <%=environment.camel_case()%> = _<%= environment %>();

<% end %>
    static String decode({required List<int> encoded, required List<int> cipher}) {
        var index = -1;
        final decoded = encoded.map((item) =>
            (item ^ cipher[++index % cipher.length]) & 0xff
        ).toList();
        return String.fromCharCodes(decoded);
    }

    static int decodeInt({required List<int> encoded, required List<int> cipher}) {
        return int.parse(decode(encoded: encoded, cipher: cipher));
    }
    
    static bool decodeBoolean({required List<int> encoded, required List<int> cipher}) {
        return decode(encoded: encoded, cipher: cipher) == 'true';
    }

}   

class Global {

<% @global_secrets.each_with_index do |secret, index| %>
  <%= DartTemplateHelper.dart_type(secret.type) %> get <%= secret.key.camel_case %> {
    final encoded = <int>[<%= secret.encoded_value %>];
    return <%= @namespace %>.<%= DartTemplateHelper.dart_decode_function(secret.type) %>(encoded: encoded, cipher: _salt);
  }
<% unless index == @global_secrets.length - 1 %>

<% end %>
<% end %>

}

<% @environments.each_with_index do |environment, env_index| %>
class _<%= environment %> implements <%= @namespace %>Environment {

<% environment_protocol_secrets(environment).each_with_index do |secret, secret_index| %>
  @override 
  <%= DartTemplateHelper.dart_type(secret.type) %> get <%= secret.protocol_key.camel_case %> {
    final encoded = <int>[<%= secret.encoded_value %>];
    return <%= @namespace %>.<%= DartTemplateHelper.dart_decode_function(secret.type) %>(encoded: encoded, cipher: _salt);
  }
<% unless secret_index == environment_protocol_secrets(environment).length - 1 %>

<% end %>
<% end %>

}
<% unless env_index == @environments.length - 1 %>

<% end %>
<% end %>
