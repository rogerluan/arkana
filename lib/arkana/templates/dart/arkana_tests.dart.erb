<% require "arkana/helpers/string" %>
<% require "arkana/helpers/dart_template_helper" %>
// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)


import 'package:test/test.dart';
import '<%=DartTemplateHelper.relative_path_to_source(@result_path.downcase)%>lib/<%= @result_path.downcase%>/<%= @namespace.downcase %>.dart';

void main(){
    const List<int> salt = [<%= @salt.formatted %>];

    test("decodeRandomHexKey_shouldDecode", () {
    <% hex_key = SecureRandom.hex(64) %>
    <% secret = generate_test_secret(key: hex_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "<%= hex_key %>");
    });

    test("decodeRandomBase64Key_shouldDecode", () {
    <% base64_key = SecureRandom.base64(64) %>
    <% secret = generate_test_secret(key: base64_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "<%= base64_key %>");
    });
       
    test("decodeUUIDKey_shouldDecode", () {
    <% uuid_key = SecureRandom.uuid %>
    <% secret = generate_test_secret(key: uuid_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "<%= uuid_key %>");
    });

    test("decodeTrueBoolValue_shouldDecode", () {
    <% bool_key = "true" %>
    <% secret = generate_test_secret(key: bool_key) %>
        const encoded = [<%= secret.encoded_value %>];
        assert(<%= @namespace %>.decodeBoolean(encoded: encoded, cipher: salt));
    });

    test("decodeFalseBoolValue_shouldDecode", () {
    <% bool_key = "false" %>
    <% secret = generate_test_secret(key: bool_key) %>
        const encoded = [<%= secret.encoded_value %>];
        assert(!<%= @namespace %>.decodeBoolean(encoded: encoded, cipher: salt));
    });

    test("decodeIntValue_shouldDecode", () {
    <% int_key = "42" %>
    <% secret = generate_test_secret(key: int_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decodeInt(encoded: encoded, cipher: salt), 42);
    });

    test("decodeIntValueWithLeadingZeroes_shouldDecodeAsString", () {
    <% int_with_leading_zeroes_key = "0001" %>
    <% secret = generate_test_secret(key: int_with_leading_zeroes_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "0001");
    });

    test("decodeMassiveIntValue_shouldDecodeAsString", () {
    <% int_with_massive_number_key = "92233720368547758079223372036854775807" %>
    <% secret = generate_test_secret(key: int_with_massive_number_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807");
    });

    test("decodeNegativeIntValue_shouldDecodeAsString", () {
    <% negative_int_key = "-42" %>
    <% secret = generate_test_secret(key: negative_int_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "-42");
    });

    test("decodeFloatingPointValue_shouldDecodeAsString", () {
    <% float_key = "3.14" %>
    <% secret = generate_test_secret(key: float_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "3.14");
    }); 

    test("encodeAndDecodeValueWithDollarSign_shouldDecode", () {
    <% dollar_sign_key = "real_$lim_shady" %>
    <% secret = generate_test_secret(key: dollar_sign_key) %>
        const encoded = [<%= secret.encoded_value %>];
        expect(<%= @namespace %>.decode(encoded: encoded, cipher: salt), "real_\$lim_shady");
    }); 


<% if ENV["ARKANA_RUNNING_CI_INTEGRATION_TESTS"] %>
    const globalSecrets = <%= @namespace %>.Global;

    test("decodeEnvVarFromDotfile_withDollarSign__andEscaped_andNoQuotes_shouldDecode", () {
        expect(globalSecrets.secretWithDollarSignEscapedAndAndNoQuotesKey, "real_\$lim_shady");
    }); 

    test("decodeEnvVarFromDotfile_withDollarSign__andEscaped_andDoubleQuotes_shouldDecode", () {
        expect(globalSecrets.secretWithDollarSignEscapedAndDoubleQuoteKey, "real_\$lim_shady");
    });

    test("decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andSingleQuotes_shouldDecode", () {
        expect(globalSecrets.secretWithDollarSignNotEscapedAndSingleQuoteKey, "real_\$lim_shady");
    });

    test("decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andDoubleQuotes_shouldDecodeWithUnexpectedValue", () {
        expect(globalSecrets.secretWithDollarSignNotEscapedAndDoubleQuotesKey, "real_\$lim_shady");
    });

    test("test_decodeEnvVarFromDotfile_withDollarSign__andNotEscaped_andNoQuotes_shouldDecodeWithUnexpectedValue", () {
        expect(globalSecrets.secretWithDollarSignNotEscapedAndNoQuotesKey, "real_\$lim_shady");
    });

    test("test_decodeEnvVarFromDotfile_withWeirdCharacters_shouldDecode", () {
        expect(globalSecrets.secretWithWeirdCharactersKey, "` ~ ! @ # % ^ & * ( ) _ - + = { [ } } | : ; ' < , > . ? /");
    });

<% end %>    
}

