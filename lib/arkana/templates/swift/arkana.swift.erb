<% require "arkana/helpers/string" %>
<% require "arkana/helpers/swift_template_helper" %>
<% # TODO: Sort these import statements alphabetically %>
// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
<% if !@should_cocoapods_cross_import_modules %>
#if COCOAPODS
#else
<% end %>
import <%= @import_name %>Interfaces
<% if !@should_cocoapods_cross_import_modules %>
#endif
<% end %>

public enum <%= @namespace %> {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        <%= @salt.formatted %>

    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension <%= @namespace %> {
    struct Global: <%= @namespace %>GlobalProtocol {
        public init() {}
<% for secret in @global_secrets %>

        @inline(__always)
        public <%= @swift_declaration_strategy %> <%= secret.key.camel_case %>: <%= SwiftTemplateHelper.swift_type(secret.type) %> = {
            let encoded: [UInt8] = [
                <%= secret.encoded_value %>

            ]
            return <%= @namespace %>.decode(encoded: encoded, cipher: <%= @namespace %>.salt)
        }()
<% end %>
    }
}

<% @environments.each_with_index do |environment, env_index| %>
public extension <%= @namespace %> {
    struct <%= environment %>: <%= @namespace %>EnvironmentProtocol {
        public init() {}
<% for secret in environment_protocol_secrets(environment) %>

        @inline(__always)
        public <%= @swift_declaration_strategy %> <%= secret.protocol_key.camel_case %>: <%= SwiftTemplateHelper.swift_type(secret.type) %> = {
            let encoded: [UInt8] = [
                <%= secret.encoded_value %>

            ]
            return <%= @namespace %>.decode(encoded: encoded, cipher: <%= @namespace %>.salt)
        }()
<% end %>
    }
}
<% unless env_index == @environments.length - 1 %>

<% end %>
<% end %>
